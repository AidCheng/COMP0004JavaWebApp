/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2024-03-19 15:49:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Hashtable;
import java.util.List;
import java.util.HashMap;

public final class operations_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.Hashtable");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Operations</title>\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/header.jsp", out, false);
      out.write("\n");
      out.write("    <script>\n");
      out.write("        ");
      out.write("\n");
      out.write("        var availObject = {}\n");
      out.write("        // initialise the availObject\n");
      out.write("        ");

        HashMap options = (HashMap<String, List>) request.getAttribute("options");
        List<String> availColumns = (List<String>) request.getAttribute("availColumns");

        for (String column: availColumns){
            List<String> availValues = (List<String>) options.get(column); 
      out.write("\n");
      out.write("            availObject[\"");
      out.print(column);
      out.write("\"] = [];\n");
      out.write("        ");
 for (String value: availValues){ 
      out.write("\n");
      out.write("                availObject[\"");
      out.print(column);
      out.write("\"].push(\"");
      out.print(value);
      out.write("\")\n");
      out.write("        ");

            }
        }
        
      out.write("\n");
      out.write("\n");
      out.write("        window.onload = function() {\n");
      out.write("            var optionSelect = document.getElementById(\"filterOptions\");\n");
      out.write("            var valueSelect = document.getElementById(\"filterValue\");\n");
      out.write("            for (var x in availObject){\n");
      out.write("                optionSelect.options[optionSelect.options.length] = new Option(x,x);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            optionSelect.onchange = function() {\n");
      out.write("               valueSelect.length = 1;\n");
      out.write("               var y = availObject[this.value];\n");
      out.write("               for (var i = 0; i < y.length; i ++){\n");
      out.write("                   valueSelect.options[valueSelect.options.length] = new Option(y[i], y[i]);\n");
      out.write("               }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h2>Patients Operations</h2>\n");
      out.write("<h3>Choose the operation from below</h3>\n");
      out.write("<form action=\"/operations.html?\">\n");
      out.write("\n");
      out.write("    <input type=\"radio\" id=\"findHighest\"  name=\"operation\" value = \"1\">\n");
      out.write("    <label for=\"findHighest\">Find Highest Age</label> <br>\n");
      out.write("\n");
      out.write("    <input type=\"radio\" id=\"findLowest\" name=\"operation\" value=\"2\">\n");
      out.write("    <label for=\"findLowest\">Find Lowest Age</label> <br>\n");
      out.write("\n");
      out.write("    <input type=\"radio\" id=\"sort\" name=\"operation\" value=\"3\">\n");
      out.write("    <label for=\"sort\">Sort\n");
      out.write("        <select name=\"sortMethod\" id=\"sortMethod\">\n");
      out.write("            <option value = \"Descending\">High to Low</option>\n");
      out.write("            <option value = \"Ascending\" selected>Low to High</option>\n");
      out.write("        </select> by\n");
      out.write("\n");
      out.write("        <select name=\"sortValue\" id=\"sortValue\" >\n");
      out.write("            <option value=\"FIRST\">first name</option>\n");
      out.write("            <option value=\"LAST\">last name</option>\n");
      out.write("            <option value=\"AGE\">age</option>\n");
      out.write("        </select>\n");
      out.write("    </label>\n");
      out.write("\n");
      out.write("    <h3> Filter </h3>\n");
      out.write("    <p>From\n");
      out.write("    <select name=\"filterOptions\" id=\"filterOptions\">\n");
      out.write("        <option value=\"\" selected=\"selected\">Select All</option>\n");
      out.write("    </select>\n");
      out.write("    show only\n");
      out.write("    <select name=\"filterValue\" id=\"filterValue\">\n");
      out.write("        <option value=\"\" selected=\"selected\">All</option>\n");
      out.write("    </select><br><br>\n");
      out.write("    <button type=\"submit\" name=\"pageInitialised\" value=\"1\">Submit</button>\n");
      out.write("    </p>\n");
      out.write("\n");
      out.write("</form>\n");
      out.write('\n');
 if((Boolean) request.getAttribute("initialised")){
      out.write("\n");
      out.write("    ");

        HashMap<Integer, String> patientList = (HashMap<Integer, String>) request.getAttribute("patientsToDisplay"); 
      out.write("\n");
      out.write("    <p>The result contains ");
      out.print(patientList.size());
      out.write(" patients</p>\n");
      out.write("    ");

        if ((Boolean) request.getAttribute("sorted")){
            List<Integer> displayOrder = (List<Integer>) request.getAttribute("order");
            for(Integer id: displayOrder){
                String href = "patientinfo.html?"
                        + "id=" + id; 
      out.write("\n");
      out.write("                <li><a href =\"");
      out.print(href);
      out.write('"');
      out.write('>');
      out.print(patientList.get(id));
      out.write("</a></li>\n");
      out.write("            ");
 }

        } else {
            for(Integer id: patientList.keySet()){
                String href = "patientinfo.html?"
                        + "id=" + id;
      out.write("\n");
      out.write("                <li><a href =\"");
      out.print(href);
      out.write('"');
      out.write('>');
      out.print(patientList.get(id));
      out.write("</a></li>\n");
      out.write("            ");
 }
        } 
      out.write('\n');
 } 
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
